const app = require("../app");
const http = require("http");
const env = require('../config/env.config');
const connectdb = require("../config/db.config");
const { Logger } = require('../helpers/logger.helper');


// Get port from environment and store in Express.
const port = normalizePort(env.PORT);
app.set('port', port);

// Create HTTP server.
const server = http.createServer(app);

connectdb.then((connection) => {
    Logger.info(`✔ DATABASE CONNECTED`);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);

}).catch((error) => {
    Logger.error('✘ DATABASE CONNECTION FAILED');
    throw error; //! this will stop the server if database connection failed
});

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

// Event listener for HTTP server 'error' event.
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
        default:
            throw error;
    }
}

// Event listener for HTTP server 'listening' event.
async function onListening() {
    Logger.verbose("Server running on http://127.0.0.1:" + port + "/api/v1");

}
